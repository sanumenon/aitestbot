package com.charitableimpact;

import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.By;
import org.testng.annotations.*;
import org.testng.asserts.SoftAssert;
import com.aventstack.extentreports.*;
import com.charitableimpact.config.ExtentReportManager;
import com.charitableimpact.{{ page_class }};

{% if browser == 'chrome' %}
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import io.github.bonigarcia.wdm.WebDriverManager;
{% elif browser == 'firefox' %}
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.firefox.FirefoxOptions;
import io.github.bonigarcia.wdm.WebDriverManager;
{% endif %}

public class {{ class_name }}Test {
    public WebDriver driver;
    ExtentReports extent;
    ExtentTest test;

    @BeforeClass
    public void setup() {
        extent = ExtentReportManager.getInstance();
        test = extent.createTest("{{ class_name }} Test");

        {% if browser == 'chrome' %}
        WebDriverManager.chromedriver().setup();
        ChromeOptions options = new ChromeOptions();
        options.addArguments("--headless", "--no-sandbox", "--disable-dev-shm-usage");
        driver = new ChromeDriver(options);
        {% elif browser == 'firefox' %}
        WebDriverManager.firefoxdriver().setup();
        FirefoxOptions options = new FirefoxOptions();
        options.addArguments("-headless");
        driver = new FirefoxDriver(options);
        {% endif %}

        driver.manage().window().maximize();
        driver.get("{{ url }}");
    }

    @Test
    public void test{{ class_name }}() {
        SoftAssert softAssert = new SoftAssert();
        {{ page_class }} page = new {{ page_class }}(driver);

        {% for element in validations %}
        try {
            page.interactWith{{ element.name|capitalize }}();
            test.pass("‚úÖ Interacted with: {{ element.name }}");
        } catch (Exception e) {
            test.fail("‚ùå Failed to interact with: {{ element.name }} - " + e.getMessage());
            softAssert.fail("Interaction failed: {{ element.name }}");
        }
        {% endfor %}

        {% if include_text_validation %}
        test.info("üîé Verifying page contains text: {{ validation_string }}");
        boolean containsText = driver.getPageSource().contains("{{ validation_string }}");
        if (containsText) {
            test.pass("‚úÖ Found: {{ validation_string }}");
        } else {
            test.fail("‚ùå Missing: {{ validation_string }}");
            softAssert.fail("Validation string not found.");
        }
        {% endif %}

        softAssert.assertAll();
    }

    @AfterClass
    public void teardown() {
        if (driver != null) {
            driver.quit();
        }
        extent.flush();
    }
}
