package com.charitableimpact;
import org.openqa.selenium.WebDriver;
{% if browser == 'chrome' %}
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import io.github.bonigarcia.wdm.WebDriverManager;
{% elif browser == 'firefox' %}
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.firefox.FirefoxOptions;
import io.github.bonigarcia.wdm.WebDriverManager;
{% endif %}
import org.testng.annotations.*;
import org.testng.Assert;
import com.charitableimpact.{{ page_class }};

public class {{ class_name }}Test {
    WebDriver driver;

    @BeforeClass
    public void setup() {
        {% if browser == 'chrome' %}
        WebDriverManager.chromedriver().setup();
        ChromeOptions options = new ChromeOptions();
        options.addArguments("--headless");
        options.addArguments("--no-sandbox");
        options.addArguments("--disable-dev-shm-usage");
        driver = new ChromeDriver(options);
        {% elif browser == 'firefox' %}
        WebDriverManager.firefoxdriver().setup();
        FirefoxOptions options = new FirefoxOptions();
        options.addArguments("-headless");
        driver = new FirefoxDriver(options);
        {% endif %}
        driver.manage().window().maximize();
        driver.get("{{ url }}");
    }

    @Test
    public void test{{ class_name }}() {
        {{ page_class }} page = new {{ page_class }}(driver);
        {% for element in validations %}
        try {
            page.interactWith{{ element.name|capitalize }}();
        } catch (Exception e) {
            System.out.println("‚ùå Failed to interact with: {{ element.name }} - " + e.getMessage());
        }
        {% endfor %}

        // Robust validation: check if a key element is actually visible
        try {
            Assert.assertTrue(
                driver.findElement(page.get{{ validations[0].name|capitalize }}Locator()).isDisplayed(),
                "Validation failed: {{ validations[0].name }} is not displayed."
            );
        } catch (Exception e) {
            Assert.fail("Validation element '{{ validations[0].name }}' not found: " + e.getMessage());
        }
    }

    @AfterClass
    public void teardown() {
        if (driver != null) {
            driver.quit();
        }
    }
}