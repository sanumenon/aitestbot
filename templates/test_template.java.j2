package com.charitableimpact;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.StandardCopyOption;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.TakesScreenshot;
import org.openqa.selenium.JavascriptExecutor;

import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.By;
import org.testng.annotations.*;
import org.testng.asserts.SoftAssert;
import com.aventstack.extentreports.*;
import com.charitableimpact.config.ExtentReportManager;
import com.charitableimpact.{{ page_class }};

{% if browser == 'chrome' %}
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import io.github.bonigarcia.wdm.WebDriverManager;
{% elif browser == 'firefox' %}
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.firefox.FirefoxOptions;
import io.github.bonigarcia.wdm.WebDriverManager;
{% endif %}

public class {{ class_name }}Test {
    public WebDriver driver;
    ExtentReports extent;
    ExtentTest test;

    @BeforeClass
    public void setup() {
        extent = ExtentReportManager.getInstance();
        
        {% if browser == 'chrome' %}
        WebDriverManager.chromedriver().setup();
        ChromeOptions options = new ChromeOptions();
        /*options.addArguments("--headless", "--no-sandbox", "--disable-dev-shm-usage");*/
        driver = new ChromeDriver(options);
        {% elif browser == 'firefox' %}
        WebDriverManager.firefoxdriver().setup();
        FirefoxOptions options = new FirefoxOptions();
        options.addArguments("-headless");
        driver = new FirefoxDriver(options);
        {% endif %}

        driver.manage().window().maximize();
        driver.get("{{ url }}");
        new File("screenshots").mkdirs();
    }

    @Test
    public void test{{ class_name }}() {
        test = extent.createTest("{{ class_name }} Test");
        SoftAssert softAssert = new SoftAssert();
        {{ page_class }} page = new {{ page_class }}(driver);

        {% for element in validations %}
        try {
            page.interactWith{{ element.name|title|replace('_', '') }}();
            test.pass("‚úÖ Interacted with: {{ element.name }}");

            {% if element.expect_text %}
            WebElement el = driver.findElement(page.get{{ element.name|title|replace('_', '') }}Locator());
            String actual = el.getText().trim();
            if (actual.contains("{{ element.expect_text }}")) {
                test.pass("‚úÖ {{ element.name }} contains expected text");
            } else {
                test.fail("‚ùå {{ element.name }} does not contain expected text");
                softAssert.fail("Unexpected text for {{ element.name }}");
            }
            {% endif %}
        } catch (Exception e) {
            test.fail("‚ùå Failed to interact with: {{ element.name }} - " + e.getMessage());
            softAssert.fail("Interaction failed: {{ element.name }}");

            try {
                File screenshot = ((TakesScreenshot) driver).getScreenshotAs(OutputType.FILE);
                String timestamp = String.valueOf(System.currentTimeMillis());
                String screenshotPath = "screenshots/{{ element.name }}_" + timestamp + "_error.png";
                File destFile = new File(screenshotPath);
                destFile.getParentFile().mkdirs();
                Files.copy(screenshot.toPath(), destFile.toPath(), StandardCopyOption.REPLACE_EXISTING);
                test.addScreenCaptureFromPath(screenshotPath);
            } catch (IOException ioException) {
                test.warning("‚ö†Ô∏è Failed to capture screenshot: " + ioException.getMessage());
            }
        }
        {% endfor %}

        {% if include_text_validation %}
        test.info("üîé Verifying page contains text: {{ validation_string }}");
        boolean containsText = driver.getPageSource().contains("{{ validation_string }}");
        if (containsText) {
            test.pass("‚úÖ Found: {{ validation_string }}");
        } else {
            test.fail("‚ùå Missing: {{ validation_string }}");
            softAssert.fail("Validation string not found.");
        }
        {% endif %}

        softAssert.assertAll();
    }

    @AfterClass
    public void teardown() {
        if (driver != null) {
            driver.quit();
        }
        extent.flush();
    }
}
